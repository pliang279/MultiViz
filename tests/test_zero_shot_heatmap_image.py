import unittest
from typing import List
from PIL import Image
import numpy as np
from mma.analysis.zero_shot_heatmap.zero_shot_heatmap_image import ZeroShotHeatmapImage


class TestZeroShotHeatmapImage(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.zshi = ZeroShotHeatmapImage()
        cls.image = Image.fromarray(np.uint8(np.random.randint(0, 256, (4, 4, 3))))
        cls.text = "This is an example text"
        cls.text_to_token = {
            "this": 0,
            "is": 1,
            "an": 2,
            "example": 3,
            "text": 4,
            "": 5,
        }

    def test_explain_instance(self):
        def image_preprocessor_fn(image: Image):
            image = Image.fromarray(np.asarray(image) // 255)
            return image

        def image_encoder_fn(input_arr: np.ndarray):
            flattened_img = input_arr.reshape(-1, 48)
            out = flattened_img @ np.array(
                [
                    [9.19628173e-01, 8.49002453e-01, 1.06575971e00, 5.49882386e-01],
                    [-7.97208547e-01, -1.10800378e00, -7.76398523e-02, -7.33533849e-01],
                    [-8.12439163e-01, -3.73192882e-01, -1.20677324e00, -5.79393782e-01],
                    [-1.92266751e00, -1.62045502e00, 1.06527464e00, -4.14521825e-01],
                    [-2.99109732e-01, 9.83992753e-01, -1.05510238e00, -1.40594572e00],
                    [-2.05590576e00, -2.95713938e00, 5.33099641e-01, -5.33616486e-01],
                    [5.88835843e-01, 1.93351674e-01, 1.41781055e00, -4.28905043e-01],
                    [-5.41083475e-01, 1.99995613e00, 1.82140799e-01, -8.50834631e-01],
                    [2.02821958e-01, -8.98649897e-01, 4.25666424e-01, 6.66440895e-01],
                    [6.68341510e-01, -8.26679937e-02, 1.09585501e00, 5.39993980e-01],
                    [1.15321912e00, -6.44175646e-01, -5.18631017e-01, 1.93498105e00],
                    [1.86628335e-01, -2.26642791e-01, -1.25064949e00, 2.93098704e-01],
                    [7.79076018e-01, -9.68771297e-01, 2.17221207e-01, -2.71565598e-01],
                    [-3.01245208e-02, 1.14363308e00, -1.96117420e-01, 1.48830220e-01],
                    [6.43028260e-01, 3.48471203e-01, 1.30111465e-01, 7.79298182e-01],
                    [-3.21081843e-01, 1.14193478e00, 1.63552294e-01, -2.74868648e-01],
                    [8.86821730e-01, -6.62732719e-01, 4.92353986e-01, 7.06149947e-01],
                    [-4.64425871e-01, -4.19208443e-01, 6.60319429e-01, -1.88771188e00],
                    [1.07962448e00, -8.87253427e-01, 3.11983646e-01, 6.13820103e-01],
                    [9.59022327e-01, 5.38498077e-01, 4.00620056e-01, 2.00171594e00],
                    [-1.63729592e00, -4.00948672e-01, -1.33771007e00, 2.60507437e-01],
                    [-5.93311987e-01, -1.91354277e00, -4.60867989e-01, 2.57367655e00],
                    [1.03718931e00, -2.37424859e-01, 5.05520517e-01, 8.84821602e-01],
                    [4.20433448e-01, -9.50172004e-01, 1.72888452e-01, -1.58903585e-01],
                    [8.32902341e-01, -5.01117188e-01, 8.84210688e-01, 6.15517279e-01],
                    [1.49497631e00, 9.85683163e-01, 1.74826379e00, -7.93959200e-01],
                    [2.04371781e-01, 1.05523790e00, 6.67589179e-01, 5.33230663e-01],
                    [1.47803844e-01, 4.30547785e-01, 3.38947362e-02, -7.82615635e-01],
                    [1.49814382e00, 2.40052410e00, 4.30219545e-01, 1.29626322e00],
                    [-2.05791816e00, -5.36315359e-01, -7.35781521e-01, -7.58528694e-01],
                    [1.63360472e-01, -2.55497895e-01, -2.52851676e-01, -1.82701867e-01],
                    [3.21530350e-01, -1.00700134e00, 1.07860411e00, -7.24519148e-01],
                    [1.51109957e00, 5.16203047e-01, 2.88951625e-01, 6.43683144e-01],
                    [4.99339354e-01, 1.10688808e00, 2.06310150e-01, -5.61790864e-01],
                    [-7.90324201e-01, -7.10685624e-01, -8.55940895e-01, 1.81172239e00],
                    [-3.75257643e-02, 4.96084208e-01, -1.62393471e-01, -6.27024870e-01],
                    [2.89032487e-01, 2.24217882e00, -1.73649978e-01, -1.08081864e-01],
                    [2.03609880e-01, -3.99005799e-01, -4.30733398e-01, -1.33755785e-01],
                    [6.76806707e-01, -1.95735496e-03, 4.72703485e-01, 9.69523832e-01],
                    [1.11315087e00, 4.75758097e-01, 2.17367925e00, -8.74989494e-01],
                    [2.85836938e-01, -8.47421062e-01, -4.83134850e-01, -7.04412822e-01],
                    [-1.56269378e00, 3.14737947e-01, 1.34007591e00, 1.34739259e00],
                    [2.35316228e-01, 1.02797132e00, 2.60641194e-01, -4.11009034e-01],
                    [1.04097236e00, 3.09790312e-01, 5.15294146e-01, -1.46642247e00],
                    [6.72022283e-01, -8.65879088e-03, -9.32036257e-01, 2.27219730e-01],
                    [-7.72231840e-01, 1.62689634e00, -1.44666784e00, 1.36329008e00],
                    [-1.34110833e00, -1.70022220e00, -1.34299823e00, -1.96211322e00],
                    [-1.53586743e00, -1.71514643e00, 2.43236897e-01, -3.74815630e-01],
                ]
            )
            softmax_out = np.exp(out) / (1 + np.exp(out))

            return softmax_out

        def text_encoder_fn(text: str):
            word_embeds = list(map(self.text_to_token.get, text.lower().split()))
            embedding = np.array(
                [
                    [-1.879321, -0.37232661, 0.80240232, -0.19308255],
                    [-0.41636274, 0.87225002, 0.86812386, -1.03196489],
                    [-0.74629701, 1.70429363, 0.48370129, 2.32290763],
                    [1.02759878, -0.53779461, 0.21262688, -1.67208261],
                    [-1.26857806, 0.6205153, 0.31843821, 0.7938336],
                    [-0.89272226, 0.44016401, -0.12751301, -0.19996849],
                ]
            )

            out = embedding[word_embeds[0]]
            for j in range(1, len(word_embeds)):
                out += embedding[word_embeds[j]]

            out /= np.linalg.norm(out)

            return out

        scores = self.zshi.explain_instance(
            self.image,
            self.text,
            image_encoder_fn,
            text_encoder_fn,
            image_preprocessor_fn=image_preprocessor_fn,
            resize_size=4,
            pixel_size=2,
        )

        assert isinstance(scores, np.ndarray)
